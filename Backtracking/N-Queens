https://leetcode.com/problems/n-queens/
Code:

class Solution {
public:
    bool isvalid(int row, int col,vector<string>& temp,int n){
        for(int i=0;i<row;i++){
            if(temp[i][col]=='Q') return false;
        }
        for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
            if(temp[i][j]=='Q') return false;
        }
        for(int i=row-1,j=col+1;i>=0 && j<n;i--,j++){
            if(temp[i][j]=='Q') return false;
        }
        return true;
    }
    void backtrack(int cur, int n, vector<vector<string>>& ans, vector<string>& temp){
        if(cur==n){
            ans.push_back(temp);
            return ;
        }
        for(int col=0;col<n;col++){
            if(isvalid(cur,col,temp,n)){
                temp[cur][col]='Q';
                backtrack(cur+1,n,ans,temp);
                temp[cur][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> temp(n,string(n,'.'));
        backtrack(0,n,ans,temp);
        return ans;
    }
};



 
