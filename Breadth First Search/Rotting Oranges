===========================================================================================================================================


In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 
Example 1:

Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.


=========================================================================================================================================


Solution:

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        unsigned int m=grid.size(),n,minutes=0;
        int a[5]={0,1,0,-1,0};
        if(m==0)
            return 0;
        n=grid[0].size();
        queue<pair<int,int>> q;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2)
                    q.push({i,j});
            }
        }
        unsigned int two=q.size();
        while(!q.empty()){
          
            minutes++;
            unsigned int z=q.size();
            for(int i=0;i<z;i++){
                int x=q.front().first, y=q.front().second;
                q.pop();
                for(int j=0;j<4;j++){
                    x+=a[j]; y+=a[j+1];
                    if(x>=0 && x<m && y>=0 && y<n && grid[x][y]==1){
                         grid[x][y]=2;
                         q.push({x,y});
                        
                     }
                    x-=a[j];
                    y-=a[j+1];
                }
            }
           
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)
                    return -1;
            }
        }
        return two==0?0:minutes-1;
    }
    
};


