https://leetcode.com/problems/trapping-rain-water/
Code:

Method 1:
class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        if(n<=2)
            return 0;
        int left[n],right[n],ans=0;
        left[0]=height[0],right[n-1]=height[n-1];
        for(int i=1;i<n;i++)
            left[i]=max(left[i-1],height[i]);
        for(int i=n-2;i>=0;i--)
            right[i]=max(right[i+1],height[i]);
        for(int i=1;i<n-1;i++)
            ans+=min(left[i],right[i])-height[i];
        return ans;
    }
};

Method 2: Two Pointers
class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        if(n<=2)
            return 0;
        int left=0,right=n-1,left_max=0,right_max=0,ans=0;
        while(left<=right){
            left_max=max(left_max,height[left]);
            right_max=max(right_max,height[right]);
            if(left_max<right_max){
                ans+=left_max-height[left++];
            }
            else{
                ans+=right_max-height[right--];
            }
        }
       
        return ans;
    }
 
};

Method 3: Using Stack

