https://leetcode.com/problems/longest-increasing-subsequence/
Code:

class Solution {
public:
    int binsearch(vector<int>& lis, int s,int e,int num){
        while(s<=e){
            int mid=s+(e-s)/2;
            if(lis[mid]==num)
                return mid;
            else if(lis[mid]<num)
                s=mid+1;
            else if(lis[mid]>num && (mid==s || lis[mid-1]<num))
                return mid;
            else 
                    e=mid-1;
            }
        return 0;
        }
    
    int lengthOfLIS(vector<int>& nums) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        vector<int> lis;
        unsigned int n=nums.size();
        if(n<=1)
            return n;
        lis.push_back(nums[0]);
        for(int i=1;i<n;i++){
            if(nums[i]>lis.back())
                lis.push_back(nums[i]);
            else{
                int index=binsearch(lis,0,lis.size()-1,nums[i]);
                lis[index]=nums[i];
            }
        }
        return lis.size();
    }
};
