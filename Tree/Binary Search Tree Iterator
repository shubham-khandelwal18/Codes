https://leetcode.com/problems/binary-search-tree-iterator/
Code:

next() and hasNext() takes average O(1) time and uses O(h) memory, where h is the height of the tree.
class BSTIterator {
public:
    stack<TreeNode*> s;
    BSTIterator(TreeNode* root) {
        this->inorder(root);
    }
    void inorder(TreeNode *root){
        while(root){
            s.push(root);
            root=root->left;
        }
        
    }
    /** @return the next smallest number */
    int next() {
        TreeNode *temp=s.top();
        s.pop();
        if(temp->right)
        inorder(temp->right);
        return temp->val;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        return s.size()>0;
    }
};
