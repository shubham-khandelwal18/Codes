https://leetcode.com/problems/kth-smallest-element-in-a-bst/
Code:

Recursive Approach:
class Solution {
public:
     vector<int> v;
     int ans;
     void helper(TreeNode* root,int k,int *c){
       if(root==NULL || (*c)>=k)
           return ;
         helper(root->left,k,c);
         (*c)++;
         if((*c)==k){
             ans=root->val;
             return ;
         }
         helper(root->right,k,c);
     }
    int kthSmallest(TreeNode* root, int k) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        int c=0;
        helper(root,k,&c);
        return ans;
    }
};

Iterative Approach:
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
     stack<TreeNode *> s;
    
    while(root || !s.empty()){
       while(root){
           s.push(root);
           root=root->left;
       }
        root=s.top();
        s.pop();
        k--;
        if(k==0) return root->val;
        
    
        root=root->right;
        
    }
    return 0;
    }
};






