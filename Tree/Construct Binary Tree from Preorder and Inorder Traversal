https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
Code:

class Solution {
public:
    int search(vector<int>& inorder,int val,int l,int r){
        for(int j=l;j<=r;j++){
            if(inorder[j]==val)
                return j;
            
        }
        return -1;
    }
    
    TreeNode*  buildTreeUtil(vector<int>& preorder, vector<int>& inorder,int l,int r,int& k){
        if(l>r)
            return NULL;
        if(k==preorder.size())
            return NULL;
        TreeNode *root= new TreeNode(preorder[k]);
        int m=search(inorder,preorder[k],l,r);
        k++;
        root->left=   buildTreeUtil(preorder,inorder,l,m-1,k);
        root->right=  buildTreeUtil(preorder,inorder,m+1,r,k);
        return root;
        
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.empty())
            return NULL;
        int k=0;
        return buildTreeUtil(preorder,inorder,0,inorder.size()-1,k);
    }
};
