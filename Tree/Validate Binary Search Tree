https://leetcode.com/problems/validate-binary-search-tree/
Code:

Recurive Approach (when duplicates are not allowed)
class Solution {
public:
    TreeNode *prev=NULL;
    bool inorder(TreeNode *root){
        if(root==NULL) return true;
        bool y= inorder(root->left);
        if(y==false) return false;
        
        if( prev && root->val<=prev->val) return false;
            
            prev=root;
      
        bool z= inorder(root->right);
         if(z==false) return false;
         else return true; 
        
    }
    bool isValidBST(TreeNode* root) {
        return inorder(root);
    }
};

Iterative Approach (when duplicates are not allowed)
class Solution {
public:
      bool isValidBST(TreeNode* root) {
          stack<TreeNode*> s;
          TreeNode *prev=NULL;
          while(root || !s.empty()){
              while(root){
                  s.push(root);
                  root=root->left;
              }
              root=s.top();
              s.pop();
              if(prev &&  root->val<=prev->val) return false;
              prev=root;
              root=root->right;
          }
          return true;
     }
};

Iterative Approach (when duplicates are allowed)
class Solution {
public:
    
      bool isValidBST(TreeNode* root) {
         stack<TreeNode*> s;
          bool rightSide = false;
          TreeNode *prev=NULL;
          while(root || !s.empty()){
              while(root){
                  s.push(root);
                  root=root->left;
              }
              root=s.top();
              s.pop();
              if(prev && ((rightSide && root->val<=prev->val)||(!rightSide && root->val<prev->val))) return false;
              prev=root;
              root=root->right;
              rightSide = root?true:false;
          }
          return true;
     }
};














