https://leetcode.com/problems/all-elements-in-two-binary-search-trees/
Code:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> vec1,vec2,ans;
    void helper(TreeNode* root,vector<int>& v){
        if(root==NULL) return ;
        helper(root->left,v);
        v.push_back(root->val);
         helper(root->right,v);
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        helper(root1,vec1);
        helper(root2,vec2);
        int i=0,j=0;
        while(i<vec1.size() && j<vec2.size()){
            if(vec1[i]<vec2[j])
                ans.push_back(vec1[i++]);
            else
                 ans.push_back(vec2[j++]);
        }
        while(i<vec1.size() )
             ans.push_back(vec1[i++]);
        while(j<vec2.size() )
             ans.push_back(vec2[j++]);
        return ans;
    }
};
