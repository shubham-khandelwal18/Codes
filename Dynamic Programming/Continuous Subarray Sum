https://leetcode.com/problems/continuous-subarray-sum/
Code:

class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        unsigned int N=nums.size();
        
        if(N<=1)
            return false;
        
            for(int i=0;i<N-1;i++){
                if(nums[i]+nums[i+1]==0){
                    return true;
                }
            }
             if(k==0)
            return false;
       
        k=abs(k);
        int sum=0;
        map<int,pair<int,int>> m;
       m[0].first=1;
        m[0].second=0;
        
        for(int i=1;i<=N;i++ ){
            sum+=nums[i-1];
            if(m[sum%k].first==1 && m[sum%k].second!=i-1 )
                return true;
            if( m[sum%k].first==0){
            m[sum%k].first=1;
             m[sum%k].second=i;
            }
        }
        return false;
    }
};
