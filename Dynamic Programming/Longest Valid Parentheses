https://leetcode.com/problems/longest-valid-parentheses/
Code:

Method 1: DP | Time Complexity O(n) | Space Complexity O(n)
class Solution {
public:
    int longestValidParentheses(string s) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        if(s.empty()) return 0;
        int n=s.length();
        vector<int> dp(n,0);
        for(int i=1;i<n;i++){
            if(s[i]==')'){
                if(s[i-1]=='('){
                    if(i==1)
                        dp[i]=2;
                    else
                        dp[i]=2+dp[i-2];
                }
                else if(s[i-1]==')'){
                    if(i-dp[i-1]>0 && s[i-dp[i-1]-1]=='('){
                        dp[i]=2+dp[i-1] +(i-dp[i-1]-2>0?dp[i-dp[i-1]-2]:0);
                    }
                }
            }
        }
        return *max_element(dp.begin(),dp.end());
    }
};

Method 2: Time Complexity O(n) | Space Complexity O(1)
class Solution {
public:
    int longestValidParentheses(string s) {
        int ans=0,n=s.length(),left=0,right=0;
        for(int i=0;i<n;i++){
            if(s[i]=='(') left++;
            else right++;
            if(left==right)
                ans=max(ans,2*left);
            else if(left<right)
                left=right=0;  
        }
        left=right=0;
        for(int i=n-1;i>=0;i--){
            if(s[i]=='(') left++;
            else right++;
            if(left==right)
                ans=max(ans,2*left);
            else if(left>right)
                left=right=0;
        }
        return ans;
    }
};




