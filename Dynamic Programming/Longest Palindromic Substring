https://leetcode.com/problems/longest-palindromic-substring/
Code:

Method 1: Time Complexity O(n*n) | Space Complexity O(n*n)
class Solution {
public:
    string longestPalindrome(string s) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        unsigned int n=s.length(),ans=1,p=0,e=0;
        if(n==0)
            return "";
        int arr[n][n];
        memset(arr,0,sizeof(arr));
        for(int i=0;i<n;i++)
            arr[i][i]=1;
        for(int i=2;i<=n;i++){
            for(int j=0;j<=n-i;j++){
                arr[j][j+i-1]=(s[j]==s[j+i-1]?(arr[j+1][j+i-2]==i-2?i:0):max(arr[j][j+i-2],arr[j+1][j+i-1]));
                if(arr[j][j+i-1]>ans){
                    p=j;
                    e=j+i-1;
                ans=arr[j][j+i-1];
                }
            }
        }
        return s.substr(p,e-p+1);
    }
};

Method 2: Time Complexity O(n*n) | Space Complexity O(1)
string Solution::longestPalindrome(string A) {
    string ans;
    int len=0,finall,finalr;
    int n=A.length();
    for(int i=0;i<n;i++){
        int l=i,r=i;
        while(l>=0 && r<n && A[l]==A[r]){
            l--;
            r++;
        }
        l++;
        r--;
        if(r-l+1>len) finall=l,finalr=r,len=r-l+1;
    }
    for(int i=0;i<n;i++){
        int l=i,r=i+1;
        while(l>=0 && r<n && A[l]==A[r]){
            l--;
            r++;
        }
        l++;
        r--;
        if(r-l+1>len) finall=l,finalr=r,len=r-l+1;
    }
    
    return A.substr(finall,len);
}
