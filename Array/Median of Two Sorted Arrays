https://leetcode.com/submissions/detail/336239097/
Code:

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
         int n1=nums1.size(),n2=nums2.size();
     
       if(n1>n2)
            swap(nums1,nums2);
        n1=nums1.size();
        n2=nums2.size();
        int k=(n1+n2+1)/2,s=0,e=n1,p1,p2;
        while(1){
            p1=s+(e-s)/2;
            p2=k-p1;
            int maxl1 = (p1==0  ?  INT_MIN:nums1[p1-1]);
            int maxl2 = (p2==0  ?  INT_MIN:nums2[p2-1]);
            int minr1 = (p1==n1 ?  INT_MAX:nums1[p1]);
            int minr2 = (p2==n2 ?  INT_MAX:nums2[p2]);
            
            if( maxl1<=minr2 && maxl2<=minr1){
                if((n1+n2)%2)
                    return max(maxl1,maxl2);
                    return ( max(maxl1,maxl2) + min(minr1,minr2))*1.0/2;
            }
           
            if(maxl1>minr2)
                e=p1-1;
            else
                s=p1+1;
        }
        return 0.0;
    }
};
